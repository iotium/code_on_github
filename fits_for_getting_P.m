% fits I made for getting P from mU and mT

function [rho_l, rho_v, u_l, u_v] = fits_for_getting_P(P, fluid)

% take P in 

if strcmp(fluid, 'N2O')

P_cr = 7245000;
D_cr = 452.011456;
u_cr = 2.895719271227007e+05;

P = P/P_cr;


% version based on rational polynomials

% rho_v:
% 4/3
coeffs_rho_v = 1e2*[ ...
      -2.776412099306883;
   1.836047824716648;
  -1.754445003937583;
   3.270647148649861;
   0.005700875346075;
  -5.664814006950635;
  -1.393532298412342;
   7.719441106919086];

% rho_l:
% 4/4

coeffs_rho_l = 1e3*[...
      -1.204417241378632;
  -2.612093720995419;
  -3.553626341939525;
   9.273665623189361;
   0.157229048830907;
  -3.425072865546610;
   1.436902347189353;
   3.648491437216036;
   0.053787190210862];

% u_l
% 3/4

coeffs_u_l = [...
      -2.576869222394410;
   2.430595313525624;
   0.225517834114427;
  -0.003625759454577;
  -3.932436239527763;
   1.738279338172760;
   1.246950115270511;
   0.025101596015874];


u_l = u_cr * sum(coeffs_u_l(1:4) .* P.^[3 2 1 0]' )...
    /sum( [1; coeffs_u_l(5:8)] .* P.^[4 3 2 1 0]' );

% u_v 
% 4/3

coeffs_u_v = [...
       0.513150596211608;
   0.505721749966868;
  -5.449791687667358;
   4.343491231891362;
   0.168996031580644;
  -4.498337506869011;
   3.430101917434508;
   0.147394519516129];
u_v = u_cr * sum(coeffs_u_v(1:5) .* P.^[4 3 2 1 0]' )...
    /sum( [1; coeffs_u_v(6:8)] .* P.^[3 2 1 0]' );


elseif strcmp(fluid,'CO2')
    
    
P_cr = 7.377300000000000e+06;
D_cr = 4.676000012817399e+02;
u_cr = 3.164687098879335e+05;

P = P/P_cr;


% version based on rational polynomials

% rho_v:
% 4/3
coeffs_rho_v = 1e2*[ ...
  -3.284268395786236
   2.426096872453393
  -2.039827740441542
   3.434794613208715
   0.003180926078386
  -5.928555293148360
  -1.605108386109476
   8.139060308989702];

% rho_l:
% 4/4

coeffs_rho_l = [...
  -5.199719046781698
  33.784350830328080
 -51.784317937417910
  19.997891821337223
   3.230044766317925
   7.470388980311762
 -19.125768902688378
   9.515383293050796
   1.165950493841405];

% u_l
% 4/4 (n2o was 3/4)!!!!

coeffs_u_l = [...
   1.509433207046617
  -2.887857549185451
   0.414693115986015
   0.972185577404074
   0.004310010027304
  -0.604752109565577
  -2.545546812553323
   1.998373689870801
   0.165040668337234];


u_l = u_cr * sum(coeffs_u_l(1:5) .* P.^[4 3 2 1 0]' )...
    /sum( [1; coeffs_u_l(6:9)] .* P.^[4 3 2 1 0]' );

% u_v 
% 5/5 (n2o was 4/3)

coeffs_u_v = 1e2*[...
  -0.602129528112031
   7.238611281692705
  -8.283683279729342
  -5.218741084423645
   6.564083162985608
   0.347360150913772
   4.178491131642212
  -5.253185423164788
  -4.312274293165620
   5.129978256069743
   0.291101570274060];
    
    u_v = u_cr * sum(coeffs_u_v(1:6) .* P.^[5 4 3 2 1 0]' )...
    /sum( [1; coeffs_u_v(7:11)] .* P.^[5 4 3 2 1 0]' );
    
else
    error('bad fluid string')
end


rho_v = D_cr * sum(coeffs_rho_v(1:5) .* P.^[4 3 2 1 0]' )...
    /sum( [1; coeffs_rho_v(6:8)] .* P.^[3 2 1 0]' );

rho_l = D_cr * sum(coeffs_rho_l(1:5) .* P.^[4 3 2 1 0]' )...
    /sum( [1; coeffs_rho_l(6:9)] .* P.^[4 3 2 1 0]' );




% version based on fourier series

%{

% rho_l
log_coeffs = [...
 21.602962650145255 - 3.141592653589793i;
 22.093211797936611 + 0.000000000000000i;
 21.307004261481335 + 0.000000000000000i;
 21.434680189593784 - 3.141592653589793i;
 21.578097934733552 - 3.141592653589793i;
 20.013699334969182 + 0.000000000000000i;
 21.256503110092542 + 0.000000000000000i;
 18.625928319446622 + 0.000000000000000i;
 20.469339832450348 - 3.141592653589793i;
 18.807975414184273 - 3.141592653589793i;
 19.186104854518327 + 0.000000000000000i;
 17.785156205467764 + 0.000000000000000i;
 17.227921344525786 - 3.141592653589793i;
 16.011230844245283 - 3.141592653589793i;
 13.262653932387117 + 0.000000000000000i;
 13.271459021397398 + 0.000000000000000i;
 12.406148922318186 + 0.000000000000000i;
  0.060592353104092 + 0.000000000000000i];

rho_tg_l = D_cr * calc_val(log_coeffs, P);

% rho_v
log_coeffs = [...
     22.655779232905239 + 0.000000000000000i;
 23.100675376191820 - 3.141592653589793i;
 22.513760753007901 - 3.141592653589793i;
 22.252168411449997 + 0.000000000000000i;
 22.728222481217312 + 0.000000000000000i;
 19.279680218686657 - 3.141592653589793i;
 22.305296045863624 - 3.141592653589793i;
 20.646319922948742 - 3.141592653589793i;
 21.351560804330951 + 0.000000000000000i;
 20.125167249620947 + 0.000000000000000i;
 19.755753079097278 - 3.141592653589793i;
 18.822153560668582 - 3.141592653589793i;
 16.499198088959499 + 0.000000000000000i;
 16.781554169038710 + 0.000000000000000i;
 15.946238819548523 + 0.000000000000000i;
 13.663811480082412 - 3.141592653589793i;
 13.927980378774272 - 3.141592653589793i;
  0.060592368907066 + 0.000000000000000i];

rho_tg_v = D_cr * calc_val(log_coeffs, P);


% u_l

log_coeffs = [...
     21.572388114713689 - 3.141592653589793i;
 21.970015160022701 + 0.000000000000000i;
 21.563140925737628 + 0.000000000000000i;
 20.862213205382929 - 3.141592653589793i;
 21.733105922087169 - 3.141592653589793i;
 19.569126982102279 - 3.141592653589793i;
 21.217913538681852 + 0.000000000000000i;
 20.043544511277609 + 0.000000000000000i;
 20.063521538784784 - 3.141592653589793i;
 19.249834228936361 - 3.141592653589793i;
 17.709628686300007 + 0.000000000000000i;
 17.722884668820441 + 0.000000000000000i;
 16.780725473610559 + 0.000000000000000i;
 15.305517101998838 - 3.141592653589793i;
 15.646884126463139 - 3.141592653589793i;
  9.905326492150266 + 0.000000000000000i;
 13.161470431484954 + 0.000000000000000i;
  0.060592397893375 + 0.000000000000000i];

u_tg_l = u_cr * calc_val(log_coeffs, P);


% u_v

log_coeffs = [...
     22.017553580191880 - 3.141592653589793i;
 22.453728343927022 + 0.000000000000000i;
 21.901879437328624 + 0.000000000000000i;
 21.563014062782315 - 3.141592653589793i;
 22.107189888917858 - 3.141592653589793i;
 15.981093600978822 + 0.000000000000000i;
 21.666297645366861 + 0.000000000000000i;
 20.117827224294700 + 0.000000000000000i;
 20.677875906543225 - 3.141592653589793i;
 19.529446170334964 - 3.141592653589793i;
 18.993901259878946 + 0.000000000000000i;
 18.180867613971412 + 0.000000000000000i;
 13.280268327379160 - 3.141592653589793i;
 16.080193969473196 - 3.141592653589793i;
 15.509865724346573 - 3.141592653589793i;
 12.832938222675846 + 0.000000000000000i;
 13.357350183723723 + 0.000000000000000i;
  0.060592353104092 + 0.000000000000000i];

u_tg_v = u_cr * calc_val(log_coeffs, P);

% out = [rho_l; rho_v; u_l; u_v];


function val = calc_val(log_coeffs, P)

coeffs = real( exp(log_coeffs) );

w = coeffs(end);

val = coeffs(1);

for i = 2:( length(coeffs)-1 )
    
    n = floor(i/2);
    
    if rem(i,2) == 0
        val = val + coeffs(i)*cos(n*P*w);
    else
        val = val + coeffs(i)*sin(n*P*w);
    end
end

%}